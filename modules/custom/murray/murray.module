<?php
/*
  things alex needs to learn
  - theme layer
  - commenting code
  */


function murray_init() {
  drupal_add_library('system', 'effects.slide');
}

/**
 * Implements hook_block_info().
 */
function murray_block_info() {
  $blocks = array();

  $blocks['get-thumbnails'] = array(
    'info' => t('Thubmails'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['get-slideshow'] = array(
    'info' => t('Slideshow on Front'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function murray_block_view($delta) {
  switch ($delta) {
    case 'get-thumbnails':
      return array(
        'subject' => t('Thumbnails'),
        'content' => _murray_get_thumbnails(),
      );
      break;
    case 'get-slideshow':
      return array(
        'subject' => t('Slideshow on Front'),
        'content' => _murray_get_slideshow(),
      );
      break;
  }
}

function murray_menu()
{
   $items['murray_thumbnail/%'] = array(
        'title' => 'Home',
        'page callback' => 'get_project_id',
        'page arguments' => array(1),
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
   );


    return $items;
}

/*
  used in hook_menu callback
  returning nothing improves page load by the remainder of the lag
  Executed 65 queries in 5.93 ms. Queries exceeding 5 ms are highlighted. Page execution time was 280.82 ms. Memory used at: devel_boot()=1.71 MB, devel_shutdown()=20.99 MB, PHP peak=21.25 MB.
  */
function get_project_id($tax_name = 'none') {

   $type_id = 0;

   $pdata = db_query("SELECT d.tid as id, d.name FROM {taxonomy_vocabulary} v inner join {taxonomy_term_data} d on v.vid = d.vid WHERE v.machine_name = :v_name and d.name = :tax_name order by name ", array(
          ':v_name' => 'project_type',
          ':tax_name' => $tax_name,
          ));

   foreach($pdata as $p) {
          $type_id = $p->id;
   }

   print $type_id;

   //return $type_id;


}

function _murray_get_project_info($tax_name = 'none'){

    global $base_url;

    $file_directory_path = '/' . file_stream_wrapper_get_instance_by_uri('public://')->getDirectoryPath();

    $output = "<ul>";

    $type_id = 0;

    $pdata = db_query("SELECT d.tid as id, d.name FROM {taxonomy_vocabulary} v inner join {taxonomy_term_data} d on v.vid = d.vid WHERE v.machine_name = :v_name and d.name = :tax_name order by name ", array(
          ':v_name' => 'project_type',
          ':tax_name' => $tax_name,
          ));

     foreach($pdata as $p) {
            $type_id = $p->id;
     }



    $result = db_query("
            SELECT node.title AS node_title, node.nid AS nid, nodequeue_nodes_node.position AS nodequeue_nodes_node_position
            FROM
            {node} node
            Left JOIN {nodequeue_nodes} nodequeue_nodes_node ON node.nid = nodequeue_nodes_node.nid AND nodequeue_nodes_node.qid = '1'
            LEFT JOIN {field_data_field_project_type} field_data_field_project_type ON node.nid = field_data_field_project_type.entity_id AND (field_data_field_project_type.entity_type = 'node' AND field_data_field_project_type.deleted = '0')
            WHERE (( (node.status = '1') AND (node.type IN  ('project')) AND (field_data_field_project_type.field_project_type_tid = :type_id ) ))
            ORDER BY nodequeue_nodes_node_position ASC ", array(
            ':type_id' => $type_id,
            ));

    foreach($result as $node_item){
        $node = node_load($node_item->nid);

        $media = $node->field_media;

        $first_image = array();
        foreach($media as $value){
            if(!empty($value)){
              $first_image = $value[0];
              break;
            }
        }



        //Get File info.
        if(!empty($first_image)) {
            $file = db_query("Select * from {file_managed} Where fid = :fid",array(
            ':fid' => $first_image['fid']
            ));

            $caption_value = "";
            if(isset($first_image['file']) && !empty($first_image['file'])){
                $media_caption = $first_image['file']->field_media_caption;

                if(!empty($media_caption)){
                foreach($media_caption as $item)
                    $caption_value = $item[0]['value'];
                }

            }
//  get the date for the title region
/*
            $date_info = "";
             foreach ( $node_item->field_date as $value ) {
                foreach ( $value as $item ) {
                  $date = $item['value'];
                  $date_info .= $date;
                }
              }
*/
            $date = $node->field_date['und'][0]['value'];

            foreach($file as $file_item){
//                $style_thumbnail = image_style_load('square_thumbnail');
  //              image_style_create_derivative($style_thumbnail, $file_item->uri, file_default_scheme() . '://styles/square_thumbnail/public/' . $file_item->filename);
              $thumbnail_file_src = image_style_url("square_thumbnail", $file_item->uri);
              $output.= '<li><a href="' . url('node/'.$node_item->nid) . '" class="thumb_nail"'.' data-date="' . $date . '"title="'. $node_item->node_title . '"><img src="' . $thumbnail_file_src . '" title="'. $node_item->node_title . '" /></a></li>';
            }
        } else {
            $output.= '<li><a href="' . url('node/'.$node_item->nid) . '" class="thumb_nail"'.' title="'. $node_item->node_title . '">'.$node_item->node_title.'</a></li>';
        }


    }

    //print $output ."</ul>";

    $output .= "</ul>";

    if($output == "<ul></ul>") $output = "";

    return $output;


    //exit(0);

    //return serialize($output);

}

/*
  returns a formatted slideshow from a particular taxonomy
  should return a slideshow for promoted projects
  doesn't return the project view slideshow
  returing nothing doesn't improve page load times
  actually this might be the restâ€“caching may have masked it
  */
function _murray_get_project_slide_info($term = null){
    global $base_url;

    $file_directory_path = '/' . file_stream_wrapper_get_instance_by_uri('public://')->getDirectoryPath();
    $output = "";

//  get a bunch of nids based on promotion and an optional term
    if ( intval($term) ) {
      $result = db_query("SELECT node.title AS node_title, node.nid AS nid
        FROM {node} node
        LEFT JOIN {field_data_field_project_type} field_data_field_project_type
          ON node.nid = field_data_field_project_type.entity_id
            AND (field_data_field_project_type.entity_type = 'node'
            AND field_data_field_project_type.deleted = '0')
        WHERE (
          (
            (node.status = '1')
          AND (node.type IN  ('project'))
          AND (field_data_field_project_type.field_project_type_tid = :type_id ) ))
        ORDER BY rand()", array(
        ':type_id' => $term,
        )
      );
    } else {
      $result = db_query("SELECT nid
        FROM {node} node
        LEFT JOIN {field_data_field_project_type} field_data_field_project_type
          ON node.nid = field_data_field_project_type.entity_id
            AND (field_data_field_project_type.entity_type = 'node'
            AND field_data_field_project_type.deleted = '0')
        WHERE (
          (
            (node.status = '1')
          AND (node.promote = '1')
          AND (node.type IN  ('project'))
           ))
        ORDER BY rand()", array(
        )
      );
    }

//  flatten the nids into an array
    $nids = array();
    foreach ($result as $obj) {
      $nids[] = $obj->nid;
    }

    //  load all the nodes now
    $nodes = node_load_multiple($nids);
    $iterator = 0;
//    krumo($nodes);
    shuffle($nodes);
    foreach($nodes as $node){

      $body = "";
      foreach($node->body as $body_item){
        $body = $body_item[0]['value'];
      }

      $date_info ="";
       foreach ( $node->field_date as $value ) {
          foreach ( $value as $item ) {
            $date = $item['value'];
            $date_info .= $date;
          }
        }

//  get the first media asset
        $media = $node->field_media;
        $first_image = array();
        foreach($media as $value){
            if(!empty($value)){
              $first_image = $value[0];
              break;
            }
        }

        //Get File info.
        if(!empty($first_image)) {
            $file = db_query("Select * from {file_managed} Where fid = :fid",array(
            ':fid' => $first_image['fid']
            ));

            $caption_value = "";
            $classes = array();

            if(isset($first_image['file']) && !empty($first_image['file'])){
                $media_caption = $first_image['file']->field_media_caption;
                if ( $first_image['file']->field_media_crop['und'][0]['value'] == 1 ) {
                  $classes[] = 'crop';
                }

                if(!empty($media_caption)){
                foreach($media_caption as $item)
                    $caption_value = $item[0]['value'];
                }
            }

            foreach ( $file as $file_item ) {
//  if there is no file then skip ahead
                if ( ! $file_item->filename )
                  continue;

//                $style_thumbnail = image_style_load('large');
//  this creates an image even if one exists
//                image_style_create_derivative($style_thumbnail, $file_item->uri, file_default_scheme() . '://styles/large/public/' . $file_item->filename);
                $large_file_src = image_style_url("large", $file_item->uri);

                if ( $iterator === 0 ) {
                  $classes[] = "active";
                  $classes[] = "first";
                }
                $classes[] = "item-$iterator";

                $output .= '<li class="' . implode(" ", $classes) . '"><a href="'. url("node/".$node->nid) .'" title="'. $caption_value . '" ><img src="' . $large_file_src . '" title="'. $caption_value . '" /></a>';
                $output .= '<div class="detail-info"><h2>';
                $output .= l($node->title, "node/".$node->nid);
                $output .= '</h2><div class="meta">';
                $output .= l($date_info, "node/".$node->nid);
                $output .= '</div></div><div class="detail-body">' . $body. '</div></li>';

                $iterator++;
            }
        }
    }
    return $output;
}


/*
  returns a formatted row of thumbnails from a particular taxonomy
  */
function _murray_get_thumbnails() {
    $output = "";

    $pdata = db_query("SELECT d.tid as id, d.name FROM {taxonomy_vocabulary} v inner join {taxonomy_term_data} d on v.vid = d.vid WHERE v.machine_name = :name order by name ", array(
          ':name' => 'project_type',
          ));
    foreach($pdata as $term_data){
        $tid = $term_data->id;
        $classes = array('menu','secondary');
        if ( arg(2) == $tid ) {
          $classes[] = 'default';
          $classes[] = 'active';
        }
        $path = drupal_get_path_alias("taxonomy/term/" . $tid);

        $path = explode("/",$path);
        //exit(0);
        $term_name = $term_data->name;
        $output .= '<div id="works-'.$path[count($path)-1].'" class="' . implode(" ", $classes) . '">';
        $output .= _murray_get_project_info($term_name);
        $output .= '</div>';
    }

    return $output;
}

/*
  this generates the slideshow for the front page and internal pages
  it should only pass in a term if we are on a term page
  */
function _murray_get_slideshow() {
    $output = "<ul>";
/*
    $pdata = db_query("SELECT d.tid as id, d.name FROM {taxonomy_vocabulary} v inner join {taxonomy_term_data} d on v.vid = d.vid WHERE v.machine_name = :name order by name ", array(
          ':name' => 'project_type',
          ));
    foreach($pdata as $term_data){
        $tid = $term_data->id;
        $path = drupal_get_path_alias("taxonomy/term/" . $tid);
        $path = explode("/",$path);
        //exit(0);
        $term_name = $term_data->name;
        $output .= _murray_get_project_slide_info($term_name);
    }*/

    $term = null;
    if ( arg(0) == "taxonomy" ) {
//    print "<h1>" . arg(2) . "</h1>";
      $term = arg(2);
    }
    $output .= _murray_get_project_slide_info($term);

    $output .= "</ul>";
    if($output == "<ul></ul>") $output = "";

    return $output;
}
